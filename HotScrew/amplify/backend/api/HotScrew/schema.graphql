enum MessageStatus {
  SENT
  DELIVERED
  READ
}

type ChatRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  LastMessage: Message @hasOne
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  newMessages: Int
  Admin: User @hasOne
  name: String
  imageUri: String
  ChatRoomUser1: ID!
  ChatRoomUser2: ID!
  User1: User @hasOne(fields: ["ChatRoomUser1"])
  User2: User @hasOne(fields: ["ChatRoomUser2"])
}

type Message @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String
  userID: ID @index(name: "byUser")
  chatroomID: ID @index(name: "byChatRoom")
  image: String
  audio: String
  status: MessageStatus
  replayToMessageID: ID
}

enum Type {
  ANDROID
  CYBORG
  DROID
  HIVEMIND
  OTHER
}

type Match @model @auth(rules: [{allow: public}]) {
  id: ID!
  User1ID: ID!
  User2ID: ID
  isMatch: Boolean!
  User1: User @hasOne(fields: ["User1ID"])
  User2: User @hasOne(fields: ["User2ID"])
  ChatRoom: ChatRoom @hasOne
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  bio: String!
  image: String
  sub: String!
  type: Type
  lookingFor: Type
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  lastOnlineAt: AWSTimestamp
}
 